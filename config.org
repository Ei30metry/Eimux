#+title: My Emacs config
#+AUTHOR: Artin Ghasivand


* Package management
** Installing use-package
#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src

* EVIL Mode
** Evil
#+begin_src emacs-lisp
(use-package evil
  :straight t
  :init
  (setq evil-auto-indent nil)
  (setq evil-emacs-state-modes nil)
  (setq evil-motion-state-modes nil)
  (setq evil-ex-sibstitute-global t)
  (setq evil-move-cursot-back nil)
  (setq evil-overriding-maps nil)
  (setq evil-move-beyong-eol t)
  (setq evil-kill-on-visual-paste nil)
  (setq evil-want-keybinding nil)
  (setq evil-want-integration t)
  :config
  (evil-mode 1))
#+end_src
** Evil-collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :straight t
    :after evil
    :config
    (evil-collection-init))
#+end_src
** Evil-commentary
#+begin_src emacs-lisp
  (use-package evil-commentary
    :straight t
    :init
    (evil-commentary-mode))
  ;; (add-to-list 'load-path "~/.config/haskmacs/evil-commentary")
  ;; (require 'evil-commentary)
  ;; (evil-commentary-mode)
#+end_src
** Evil-surround
#+begin_src emacs-lisp
(use-package evil-surround
  :straight t
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src
** Evil-quickscope
#+begin_src emacs-lisp
(use-package evil-quickscope
  :straight t
  :after evil
  :config
  :hook ((prog-mode . turn-on-evil-quickscope-mode)
	 (LaTeX-mode . turn-on-evil-quickscope-mode)
	 (org-mode . turn-on-evil-quickscope-mode)))
#+end_src
** Evil-lion
#+begin_src emacs-lisp
(use-package evil-lion
  :straight t
  :init
  (evil-lion-mode))
#+end_src
* Initial modes
#+begin_src emacs-lisp
(winner-mode 1)
#+end_src
* Disabling default buffers and backup files
#+begin_src emacs-lisp
(setq-default message-log-max nil)

(add-hook 'minibuffer-exit-hook
      #'(lambda ()
         (let ((buffer "*Completions*"))
           (and (get-buffer buffer)
            (kill-buffer buffer)))))

(setq-default warning-minimum-level nil)
(setq make-backup-files nil)
(setq aut-save-default nil)
(setq auto-save-list-file-prefix nil)

;; TODO Fix this
(setq-default show-trailing-whitespace nil)
#+end_src
* Keybidings
** Functions
#+begin_src emacs-lisp
;;;###autoload
(require 'windmove)
(defun +company-has-completion-p ()
  "Return non-nil if a completion candidate exists at point."
  (when company-mode
    (unless company-candidates-length
      (company-manual-begin))
    (= company-candidates-length 1)))

(defun kill-all-buffers (&optional buffer-list interactive)
  "Kill all buffers and closes their windows.

If the prefix arg is passed, doesn't close windows and only kill buffers that
belong to the current project."
  (interactive
   (list (if current-prefix-arg
             (doom-project-buffer-list)
           (doom-buffer-list))
         t))
  (if (null buffer-list)
      (message "No buffers to kill")
    (save-some-buffers)
    (delete-other-windows)
    (when (memq (current-buffer) buffer-list)
      (switch-to-buffer (doom-fallback-buffer)))
    (mapc #'kill-buffer buffer-list)
    (doom--message-or-count
     interactive "Killed %d buffers"
     (- (length buffer-list)
        (length (cl-remove-if-not #'buffer-live-p buffer-list))))))

;;;###autoload
(defun +company/toggle-auto-completion ()
  "Toggle as-you-type code completion."
  (interactive)
  (require 'company)
  (setq company-idle-delay (unless company-idle-delay 0.2))
  (message "Auto completion %s"
           (if company-idle-delay "enabled" "disabled")))


;;;###autoload
(defun +company/complete ()
  "Bring up the completion popup. If only one result, complete it."
  (interactive)
  (require 'company)
  (when (ignore-errors
          (/= (point)
              (cdr (bounds-of-thing-at-point 'symbol))))
    (save-excursion (insert " ")))
  (when (and (company-manual-begin)
             (= company-candidates-length 1))
    (company-complete-common)))

;;;###autoload
(defun +company/dabbrev ()
  "Invokes `company-dabbrev-code' in prog-mode buffers and `company-dabbrev'
everywhere else."
  (interactive)
  (call-interactively
   (if (derived-mode-p 'prog-mode)
       #'company-dabbrev-code
     #'company-dabbrev)))

(defalias 'doom-buffer-list #'buffer-list)
(defvar doom-fallback-buffer-name "*scratch*")

(defun +evil--window-swap (direction)
  "Move current window to the next window in DIRECTION.
If there are no windows there and there is only one window, split in that
direction and place this window there. If there are no windows and this isn't
the only window, use evil-window-move-* (e.g. `evil-window-move-far-left')."
  (when (window-dedicated-p)
    (user-error "Cannot swap a dedicated window"))
  (let* ((this-window (selected-window))
         (this-buffer (current-buffer))
         (that-window (windmove-find-other-window direction nil this-window))
         (that-buffer (window-buffer that-window)))
    (when (or (minibufferp that-buffer)
              (window-dedicated-p this-window))
      (setq that-buffer nil that-window nil))
    (if (not (or that-window (one-window-p t)))
        (funcall (pcase direction
                   ('left  #'evil-window-move-far-left)
                   ('right #'evil-window-move-far-right)
                   ('up    #'evil-window-move-very-top)
                   ('down  #'evil-window-move-very-bottom)))
      (unless that-window
        (setq that-window
              (split-window this-window nil
                            (pcase direction
                              ('up 'above)
                              ('down 'below)
                              (_ direction))))
        (with-selected-window that-window
          (switch-to-buffer (doom-fallback-buffer)))
        (setq that-buffer (window-buffer that-window)))
      (window-swap-states this-window that-window)
      (select-window that-window))))

(defun doom-fallback-buffer ()
  "Returns the fallback buffer, creating it if necessary. By default this is the
scratch buffer. See `doom-fallback-buffer-name' to change this."
  (let (buffer-list-update-hook)
    (get-buffer-create doom-fallback-buffer-name)))

 (defun doom--message-or-count (interactive message count)
  (if interactive
      (message message count)
    count))

(defun +evil/window-move-left ()
  "Swap window to the left."
  (interactive) (+evil--window-swap 'left))
;;;###autoload
(defun +evil/window-move-right ()
  "Swap window to the right"
  (interactive) (+evil--window-swap 'right))
;;;###autoload
(defun +evil/window-move-up ()
  "Swap window upward."
  (interactive) (+evil--window-swap 'up))
;;;###autoload
(defun +evil/window-move-down ()
  "Swap window downward."
  (interactive) (+evil--window-swap 'down))

(defun window-maximize-buffer (&optional arg)
  "Close other windows to focus on this one.
Use `winner-undo' to undo this. Alternatively, use `doom/window-enlargen'."
  (interactive "P")
  (when (and (bound-and-true-p +popup-mode)
             (+popup-window-p))
    (+popup/raise (selected-window)))
  (delete-other-windows))

(defvar winner-undone-data  nil) ; There confs have been passed.

(defun winner-undo ()
  "Switch back to an earlier window configuration saved by Winner mode.
In other words, \"undo\" changes in window configuration."
  (interactive)
  (cond
   ((not winner-mode) (error "Winner mode is turned off"))
   (t (unless (and (eq last-command 'winner-undo)
 		   (eq winner-undo-frame (selected-frame)))
	(winner-save-conditionally)     ; current configuration->stack
 	(setq winner-undo-frame (selected-frame))
 	(setq winner-point-alist (winner-make-point-alist))
 	(setq winner-pending-undo-ring (winner-ring (selected-frame)))
 	(setq winner-undo-counter 0)
 	(setq winner-undone-data (list (winner-win-data))))
      (cl-incf winner-undo-counter)	; starting at 1
      (when (and (winner-undo-this)
 		 (not (window-minibuffer-p)))
 	(message "Winner undo (%d / %d)"
 		 winner-undo-counter
 		 (1- (ring-length winner-pending-undo-ring)))))))
#+end_src

** Config
#+begin_src emacs-lisp
  (use-package general
    :straight t
    :config
    (general-evil-setup t))

  (general-define-key
       :states 'insert
       "C-SPC" '+company/complete )

  (general-create-definer my-leader-def
       :prefix "SPC")

  (general-create-definer my-local-leader-def
      :prefix "SPC m")

  (my-leader-def
     :states 'normal
     :prefix "SPC"
     :keymaps '(projectile-mode-map)
     "p c" '(projectile-compile-project :which-key "Compile project")
     "p f" '(projectile-find-file :which-key "Find file")
     "SPC" '(projectile-find-file :which-key "Find file")
     "p p" '(projectile-switch-project :which-key "Switch to project")
     "p a" '(projectile-add-known-project :which-key "Add project to known projects")
     "p t" '(projectile-run-vterm :which-key "Run vterm in project root"))

  (my-leader-def
     :states 'normal
     :prefix "SPC c"
     :keymaps '(lsp-mode-map lsp-ui-mode-map)
     "d" '(lsp-find-definition :which-key "Find definition")
     "t" '(lsp-ui-doc-glance :which-key "Show documentation")
     "r" '(lsp-ui-peek-find-references :which-key "Show documentation")
     )

  (my-local-leader-def
     :states 'normal
     :keymaps '(haskell-mode-map haskell-interactive-mode-map)
     "t" '(haskell-process-do-type :which-key "Show type at point")
     "r" '(haskell-process-reload :which-key "Reload the current module")
     "k" '(haskell-interactive-mode-clear :which-key "Clear the GHCi buffer")
     "l" '(haskell-process-load-file :which-key "Load the module")
     "v" '(haskell-cabal-visit-file :which-key "Open the .cabal file")
     "b" '(haskell-process-cabal-build :which-key "Build the project")
     "x" '(haskell-process-cabal :which-key "Execute a cabal command")
     "s" '(haskell-interactive-switch :which-key "Switch between GHCi and buffer"))

  ;; agda2-mode keybindings
  (my-local-leader-def
     :states 'normal
     :keymaps '(agda2-mode-map agda2-goal-map)
     "a" '(agda2-auto-maybe-all :which-key "Try to solve every goal using Auto")
     "b" '(agda2-previous-goal :which-key "Go to the previous goal")
     "f" '(agda2-next-goal :which-key "Go to the next goal")
     "l" '(agda2-load :which-key "Load the current module")
     "c" '(agda2-make-case :which-key "Case split on the current goal")
     "e" '(agda2-show-context :which-key "Show the context for the current goal")
     "r" '(agda2-refine :which-key "Refine the goal")
     "x q" '(agda2-quit :which-key "Quit")
     "x c" '(agda2-compile :which-key "Compile the project")
     "x r" '(agda2-restart :which-key "Restart agda2-mode")
     "n" '(agda2-compute-normalised-maybe-toplevel :which-key "Show the normalised form")
     "t" '(agda2-goal-type :which-key "Show the type of the goal")
     "SPC" '(agda2-give :which-key "Give input")
     "," '(agda2-goal-and-context :which-key "Show the goal and context")
     "." '(agda2-goal-and-context-and-inferred :which-key "Show the goal and context and infered")
     ";" '(agda2-goal-and-context-and-checked :which-key "Show the goal and context and checked")
     "=" '(agda2-show-constraints :which-key "Show the constraints")
     "d" '(agda2-goto-definition-keyboard :which-key "Go to defintion")
     "?" '(agda2-show-goals :which-key "Show the goals")
     "RET" '(agda2-elaborate-give :which-key "Elaborate check the give expression")
     )

  (my-leader-def
     :keymaps 'normal

     ;; Help menu
     "h f" '(describe-function :which-key "Describe function")
     "h m" '(describe-mode :which-key "Describe mode")
     "h k" '(describe-key :which-key "Describe key")
     "h K" '(describe-keymap :which-key "Describe keymap")
     "h b" '(general-describe-keybindings :which-key "Describe all keybindings")
     "h c" '(describe-char :which-key "Describe char")
     "h x" '(describe-command :which-key "Describe command")
     "h s" '(describe-symbol :which-key "Describe symbol")

     ;; Journal
     "j N" '(org-journal-new-entry :which-key "New journal entry")
     "j n" '(org-journal-next-entry :which-key "Next journal entry")
     "j p" '(org-journal-previous-entry :which-key "Previous journal entry")
     "j r" '(org-journal-read-entry :which-key "Read journal entry")
     "j s" '(org-journal-search-forever :which-key "Search in all the journal files ")
     "j S" '(org-journal-search :which-key "Search in journal files ")


     "h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")

     "C" '(org-capture :which-key "Org Capture")
     "a" '(org-agenda :which-key "Org Agenda")
     "d" '(dired :which-key "Dired")

     ":" '(execute-extended-command :which-key "M-x")
     "," '(persp-switch-to-buffer :which-key "Show buffers")
     "." '(find-file :which-key "Find file")

     ;; Buffers
     "b b" '(ibuffer :which-key "Ibuffer")
     "b k" '(kill-current-buffer :which-key "Kill current buffer")
     "b ]" '(next-buffer :which-key "Next buffer")
     "b [" '(previous-buffer :which-key "Previous buffer")
     "b B" '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
     "b K" '(kill-all-buffers :which-key "kill all buffers")

     "t t" '(toggle-truncate-lines :which-key "Toggle truncate lines")

     ;; Window splits
     "w d" '(evil-window-delete :which-key "Close window")
     "w n" '(evil-window-new :which-key "New window")
     "w s" '(evil-window-split :which-key "Horizontal split window")
     "w v" '(evil-window vsplit :which-key "Vertical split window")

     ;; Window motions
     "w h" '(evil-window-left :which-key "Window left")
     "w l" '(evil-window-right :which-key "Window right")
     "w k" '(evil-window-up :which-key "Window up")
     "w j" '(evil-window-down :which-key "Window down")
     "w w" '(evil-window-next :which-key "Next Window")
     "w H" '(+evil/window-move-left :which-key "Move window to left")
     "w L" '(+evil/window-move-right :which-key "Move window to right")
     "w J" '(+evil/window-move-down :which-key "Move window to down")
     "w K" '(+evil/window-move-up :which-key "Move window to up")

     ;; Window size
     "w m m" '(window-maximize-buffer :which-key "Full screen window")
     "w u" '(winner-undo :which-key "Revert back to the last window state")

     ;; Magit
     "g g" '(magit-status :which-key "Git status")

     ;; "g g" '(magit-status :which-key "Magit status")

     ;; Terminal
     "o t" '(vterm :which-key "Open vterm")
     "o T" '(term :which-key "Open vterm")
     "o e" '(eshell :which-key "Open eshell")

     ;; Searching
     "s i" '(consult-imenu :which-key "Imenu buffer")
     "s I" '(consult-imenu :which-key "Imenu multi-buffer")
     "s r" '(consult-recent-file :which-key "Recent files")

     "/" '(consult-ripgrep :which-key "Search current project")

     ;; LSP
     "c S" '(lsp :which-key "LSP mode"))

  #+end_src
*** macOS
#+begin_src emacs-lisp
(setq mac-option-key-is-meta t
      mac-command-key-is-meta nil
      mac-command-modifier 'super
      mac-option-modifier 'meta)

#+end_src
* OS packages
** osx-lib
#+begin_src emacs-lisp
(use-package osx-lib
  :straight t)
#+end_src
** osx-plist
#+begin_src emacs-lisp
(use-package osx-plist
  :straight t)
#+end_src
** Prevent Emacs from closing
#+begin_src emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src
* UI
** Theme
#+begin_src emacs-lisp
 (setq scroll-conservatively 101)
 ;; (use-package reverse-theme
  ;;   :insure t)
  (use-package doom-themes
  :straight t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-meltbus t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

  (use-package sexy-monochrome-theme :straight t)
  (use-package minimal-theme :straight t)
  (use-package kosmos-theme :straight t)
  ;; (use-package eziam-themes :straight t)
  (use-package almost-mono-themes :straight t)
  (add-to-list 'custom-theme-load-path "~/.config/haskmacs/themes")
  ;; (set-foreground-color "white")
  ;; (set-background-color "black")

  ;; (load-theme 'reverse-theme t)
#+end_src

#+begin_src emacs-lisp
(use-package doom-modeline
  :straight t
  :config
  (setq doom-modeline-indent-info nil)
  (setq doom-modeline-major-mode-color-icon nil)
  :init
  (doom-modeline-mode))
#+end_src
** Font
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :font "Andale Mono 14"
                    :weight 'medium)

(set-face-attribute 'variable-pitch nil
                    :font "Andale Mono 14"
                    :weight 'medium)

(set-face-attribute 'fixed-pitch nil
                    :font "Andale Mono 14"
                    :weight 'medium)
;; needed for emacsclient
(add-to-list 'default-frame-alist '(font . "Andale Mono 14"))
#+end_src

** Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t
    :if (display-graphic-p))
#+end_src

** Dashboard
#+begin_src emacs-lisp
    (use-package dashboard
    :straight t
    :init
    (setq dashboard-set-heading-icons nil)
    (setq dashboard-icon-type 'all-the-icons)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "It's good to have an end to journey toward; but it's the journey that matters in the end.")
    (setq dashboard-startup-banner "~/.emacs.d/images/lambda.png")
    (setq dashboard-center-content t)
    (setq dashboard-items '((agenda . 15)))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book"))))

#+end_src
* GUI settings
#+begin_src emacs-lisp
   (menu-bar-mode 1)
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (pixel-scroll-precision-mode 1)
   ;; (setq fancy-splash-image "~/.config/my-emacs/images/lambda.png")

   ;; for emacs 29
   ;; (setq frame-resize-pixelwise t)
   ;; (add-to-list 'default-frame-alist '(undecorated . t))
   ;; (global-display-line-numbers-mode 1)
   ;; (defun turn-on-numbers ()
   ;;      (unless (eq major-mode 'pdf-view-mode)
   ;;              (display-line-numbers-mode 1)))

   ;; (type-of turn-on-numbers)
  ;; (unless (eq major-mode 'pdf-view-mode)
  ;;         (global-display-line-numbers-mode 1))

   (global-display-line-numbers-mode 1)
   (global-visual-line-mode 1)
   (setq display-line-numbers-type 'relative)
#+end_src

* Org-mode
** Improving upon org-mode
*** Org-mode
#+begin_src emacs-lisp
  (use-package org
    :straight t
    :init
    (setq org-directory "~/Journal")
    (unless (file-exists-p org-directory)
      (mkdir org-directory t))
    :config
    (setq org-startup-indented t)
    (setq org-log-into-drawer t)
    (setq org-treat-insert-todo-heading-as-state-change t)
    (setq org-return-follows-link t)
    (setq org-src-tab-acts-natively nil)
    (setq org-agenda-files '("~/Agenda/todo.org" "~/Agenda/habits.org"))
    (add-hook 'org-mode-hook 'smartparens-mode)
    (add-hook 'org-agenda-mode-hook
          #'(lambda ()
            (visual-line-mode -1)
            (toggle-truncate-lines 1)
            (display-line-numbers-mode 0))))
    ;; (add-hook 'org-mode-hook
    ;;       (lambda ()
    ;;         (rainbow-delimiters-mode -1))))
#+end_src
*** Org-Capture
#+begin_src emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Agenda/todo.org" "Inbox")
         "* TODO %?\n  %i\n")))
#+end_src
*** Org-contrib
#+begin_src emacs-lisp
(use-package org-contrib
  :straight t
  :after (org)
  :config
  (require 'ox-extra)
  (ox-extras-activate '(latex-header-blocks ignore-headlines)))
#+end_src
*** Evil-org
#+begin_src emacs-lisp
(use-package evil-org
  :straight t
  :hook (org-mode . evil-org-mode)
  :config
  (add-hook 'evil-org-mode-hook
	    #'(lambda ()
	      (evil-org-set-key-theme '(navigation insert textobjects additional calendar todo))))
  (add-to-list 'evil-emacs-state-modes 'org-agenda-mode)
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src
*** Org-bullets
#+begin_src emacs-lisp
(use-package org-bullets
   :straight t)

(add-hook 'org-mode-hook #'(lambda () (org-bullets-mode 1)))
#+end_src
*** Org-tempo
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sq" . "src sql")))
#+end_src
*** TOC-org
#+begin_src emacs-lisp
(use-package toc-org
  :straight t
  :config
  (add-hook 'org-mode-hook 'toc-org-mode))
#+end_src
** Productivity
*** Org-super-agenda
#+begin_src emacs-lisp
(use-package org-super-agenda
   :straight t)
#+end_src
*** Org-alert
#+begin_src emacs-lisp
  ;; (use-package org-alert
  ;;   :straight t
  ;;   :config
  ;;   (setq alert-default-style 'osx-notifier
  ;;         org-alert-notification-title "Agenda"
  ;;         org-alert-interval 300)
  ;;   :init
  ;;   (org-alert-enable))
#+end_src
*** Books
#+begin_src emacs-lisp
(use-package org-books
  :straight t
  :config
  (setq org-books-file "~/Agenda/books.org"))
#+end_src
*** Deft
#+begin_src emacs-lisp
(use-package deft
    :straight t
    :config
    (setq deft-directory "~/Journal"
          deft-extensions '("md" "org" "txt")
          deft-recursive t))

(setq deft-directory "~/Journal"
      deft-extensions '("md" "org" "txt")
      deft-recursive t)
#+end_src
*** Org-journal
#+begin_src emacs-lisp
(use-package org-journal
    :straight t)

(setq org-journal-date-prefix "#+TITLE: "
      org-journal-dir "~/Journal"
      org-journal-time-prefix "* "
      org-journal-date-format "%a, %Y-%m-%d"
      org-journal-file-format "%Y-%m-%d.org")



(setq org-directory "~/Journal")

#+end_src
*** Org-roam
#+begin_src emacs-lisp

#+end_src

(setq org-roam-directory "~/Research")
*** helm-bibtex
#+begin_src emacs-lisp
  ;; (use-package helm-bibtex
  ;;   :ensure t)
#+end_src
*** Org-ql
#+begin_src emacs-lisp
  ;; (use-package org-ql
  ;;   :ensure t)
  ;; (add-to-list 'load-path "~/.config/haskmacs/org-ql")
  ;; (add-to-list 'load-path "~/.config/haskmacs/peg")
  ;; (require 'org-ql)
#+end_src
* Which key
#+begin_src emacs-lisp
(use-package which-key
  :straight t
  :config
  (setq which-key-allow-imprecise-window-fit t)
  :init
  (which-key-mode))

(setq which-key-idle-delay 0.2)
#+end_src
* Tools
** Persp mode
#+begin_src emacs-lisp
(use-package persp-mode
  :straight t)
#+end_src
** Rainbow delimiters
#+begin_src emacs-lisp
;; (add-to-list 'load-path "~/.config/haskmacs/rainbow-delimiters")
;; (require 'rainbow-delimiters)
;; (use-package rainbow-delimiters
;;   :ensure t)
;; (add-hook 'lisp-mode #'rainbow-delimiters-mode)
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :straight t)
#+end_src
** Eglot
#+begin_src emacs-lisp
;; (use-package eglot
;;   :ensure t)
#+end_src
** LSP
#+begin_src emacs-lisp
  ;; for improvement
  (setq read-process-output-max (* 2048 2048))
  (setq gc-cons-threshold 100000000)

  (use-package lsp-mode
     :straight t
     :commands lsp
     :init
     (setq lsp-keymap-prefix nil)
     :config
     (setq lsp-file-watch-threshold 3000)
     (setq lsp-log-io nil)
     (setq lsp-use-plists nil)
     (setq lsp-idle-delay 1))
#+end_src
** LSP-UI
#+begin_src emacs-lisp
  (use-package lsp-ui
    :straight t)
#+end_src
** Smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :straight t
  :init
  (smartparens-global-mode))
#+end_src
** Vertico
#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :bind (:map vertico-map
            ("C-j" . vertico-next)
            ("C-k" . vertico-previous))
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))
#+end_src
** Savehist
#+begin_src emacs-lisp
(use-package savehist
  :straight t
  :init
  (savehist-mode))
#+end_src
** Company
#+begin_src emacs-lisp

(use-package company
  :straight t
  :config
  (setq company-idle-delay 0.15)
  (setq company-minimum-prefix-length 2)
  (setq company-show-number t))

(add-hook 'after-init-hook 'global-company-mode)

#+end_src
** Company-Box
#+begin_src emacs-lisp
(use-package company-box
  :straight t)
#+end_src
** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :straight t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Terminal
*** term
#+begin_src emacs-lisp
(add-hook 'term-mode-hook #'(lambda () (display-line-numbers-mode -1)))
(setq explicit-shell-file-name "zsh")
#+end_src
*** vterm
#+begin_src emacs-lisp
(use-package vterm
  :straight t
  :config
  (add-hook 'vterm-mode-hook #'(lambda () (display-line-numbers-mode -1))))

  ;; (use-package vterm-toggle
  ;;   :straight t)
#+end_src

*** eshell
#+begin_src emacs-lisp
  ;; (use-package eshell
  ;;   :straight t
  ;;   (add-hook 'eshell-mode-hook #'(lambda () (display-line-numbers-mode -1))))
  (add-hook 'eshell-mode-hook #'(lambda () (display-line-numbers-mode -1)))
#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :straight t
  :init
  (projectile-mode 1))
#+end_src
** Xref
#+begin_src emacs-lisp
(use-package xref
  :straight t)
#+end_src
** Tab management
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default default-tab-width 4)
(setq-default tab-width 4)
(setq-default evil-indent-convert-tabs nil)
(setq-default indent-tabs-mode nil)
(setq-default evil-shift-round nil)
#+end_src
** PDF tools
#+begin_src emacs-lisp
(use-package pdf-tools
  :straight t
  :config
  (add-hook 'pdf-view-mode-hook #'(lambda () (display-line-numbers-mode -1)))
  (pdf-tools-install))


#+end_src
** Imenu
#+begin_src emacs-lisp
(use-package imenu
  :straight t)
#+end_src
** Swiper
#+begin_src emacs-lisp
(use-package swiper
  :straight t)
#+end_src
** Counsult
#+begin_src emacs-lisp
(use-package consult
   :straight t)

#+end_src
** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :straight t
  :init
  (marginalia-mode))
#+end_src
** Helpful
#+begin_src emacs-lisp
  ;; (use-package helpful
  ;;     :ensure t)
#+end_src
* Programming Languages
** Haskell
*** Haskell-mode
#+begin_src emacs-lisp
  (use-package haskell-mode
    :straight t
    :config
    (setq haskell-font-lock-symbols t)
    (custom-set-variables '(haskell-stylish-on-save nil))
    (custom-set-variables '(haskell-process-log t))
    :hook
    (haskell-mode . (lambda () (setq evil-auto-indent nil)))
    (haskell-mode . interactive-haskell-mode)
    (haskell-mode . haskell-auto-insert-module-template)
    (haskell-mode . haskell-decl-scan-mode))
  ;; (add-hook 'haskell-mode-hook #'lsp-mode)
  ;;(add-hook 'haskell-mode-hook (lambda () (setq evil-auto-indent nil)))
  ;; (add-hook 'haskell-mode-hook '(interactive-haskell-mode))
  ;; (add-hook 'haskell-mode-hook '(haskell-auto-insert-module-template))
  ;; ;; (add-hook 'haskell-mode-hook '(haskell-decl-scan-mode))
  ;; (setq haskell-font-lock-symbols t)
  ;; (custom-set-variables '(haskell-stylish-on-save t))
  ;; (custom-set-variables '(haskell-process-log t))

  ;; (defun dotspacemacs/user-config ()
  ;;  (with-eval-after-load "haskell-mode"
  ;;     ;; This changes the evil "O" and "o" keys for haskell-mode to make sure that
  ;;     ;; indentation is done correctly. See
  ;;     ;; https://github.com/haskell/haskell-mode/issues/1265#issuecomment-252492026.
  ;;     (defun haskell-evil-open-above ()
  ;;       (interactive)
  ;;       (evil-digit-argument-or-evil-beginning-of-line)
  ;;       (haskell-indentation-newline-and-indent)
  ;;       (evil-previous-line)
  ;;       (haskell-indentation-indent-line)
  ;;       (evil-append-line nil))

  ;;     (defun haskell-evil-open-below ()
  ;;       (interactive)
  ;;       (evil-append-line nil)
  ;;       (haskell-indentation-newline-and-indent))

  ;;     (evil-define-key 'normal haskell-mode-map
  ;;       "o" 'haskell-evil-open-below
  ;;       "O" 'haskell-evil-open-above)
  ;;   )
  ;; )

#+end_src

*** LSP-Haskell
#+begin_src emacs-lisp
  (use-package lsp-haskell
    :straight t
    :after haskell-mode
    :config
    (setq lsp-haskell-server-path "haskell-language-server-wrapper"))
          ;; lsp-haskell-liquid-on t
          ;; lsp-haskell-fomatting-provider "stylish-haskell"))
#+end_src
** Agda
#+begin_src elisp
(load-file (let ((coding-system-for-read 'utf-8))
                (shell-command-to-string "agda-mode locate")))
#+end_src
** OCaml
#+begin_src emacs-lisp
(use-package tuareg-mode
    :straight t)

(use-package merlin
    :straight t)
#+end_src
** C
** Lean
#+begin_src emacs-lisp
(use-package lean4-mode
  :straight (lean4-mode
	     :type git
	     :host github
	     :repo "leanprover/lean4-mode"
	     :files ("*.el" "data"))
  ;; to defer loading the package until required
  :commands (lean4-mode))
#+end_src
** Nix
#+begin_src emacs-lisp
(use-package nix-mode
   :straight t)

#+end_src
** Applescript
#+begin_src emacs-lisp
  ;; (use-package applescript-mode
  ;;     :straight t)
(use-package apples-mode
     :straight t)
#+end_src
** Javascript
#+begin_src emacs-lisp
(use-package js2-mode
    :straight t)
#+end_src
** Python
#+begin_src emacs-lisp
(use-package python-mode
   :straight t)
#+end_src
** Swift
#+begin_src emacs-lisp
(use-package swift-mode
    :straight t)
#+end_src
*** LSP-Sourcekit
#+begin_src emacs-lisp
(use-package lsp-sourcekit
    :straight t
    :after lsp-mode
    :config
    (setq lsp-sourcekit-executable "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/sourcekit-lsp"))
#+end_src
* Data Serialization
** JSON
#+begin_src emacs-lisp
(use-package json-mode
  :straight t)
#+end_src
** YAML
#+begin_src emacs-lisp
(use-package yaml-mode
  :straight t)
#+end_src
** CSV
#+begin_src emacs-lisp
(use-package csv-mode
  :straight t)
#+end_src

* Markup languages
** Latex mode
#+begin_src emacs-lisp
(use-package tex-mode
  :straight t)
#+end_src
** Ott
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/ott-mode")
(require 'ott-mode)
#+end_src
** Markdown mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :straight t)
#+end_src

* Chat
** Ement
#+begin_src emacs-lisp
(use-package ement
    :straight t)
#+end_src
** Telega
#+begin_src emacs-lisp
  (use-package telega
      :straight t
      :config
      (setq telega-chat-bidi-display-reordering t)
      (setq telega-server-libs-prefix "/usr/local")
      :hook
      (telega-chat-mode . (lambda () (display-line-numbers-mode -1)))
      (telega-root-mode . (lambda () (display-line-numbers-mode -1))))

  ;; (defun get-tdlib-path ()
  ;;   (replace-regexp-in-string "\n$" "" (shell-command-to-string "nix-store -q --outputs $(nix-instantiate '<nixpkgs>' -A tdlib)")))

#+end_src
