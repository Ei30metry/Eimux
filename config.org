#+title: Emacs Config
#+author: Artin Ghasivand

* GUI settings
#+begin_src emacs-lisp
(setq inhibit-startup-screen t
      inhibit-startup-message t)

(winner-mode 1)
(setq display-line-numbers-type 'relative
      scroll-conservatively 101)
   (if (display-graphic-p)
       (menu-bar-mode 1)
       (menu-bar-mode -1))

   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (pixel-scroll-precision-mode 1)
   (global-display-line-numbers-mode 1)
   (global-visual-line-mode 1)
#+end_src
* mode-line
#+begin_src emacs-lisp
(column-number-mode 1)
#+end_src
* MISC
#+begin_src emacs-lisp
(setq disabled-command-function nil)
#+end_src
* Buffer
#+begin_src emacs-lisp
(setq-default message-log-max :error)

(add-hook 'minibuffer-exit-hook
      #'(lambda ()
         (let ((buffer "*Completions*"))
           (and (get-buffer buffer)
            (kill-buffer buffer)))))

(setq-default show-trailing-whitespace nil)
(setq-default warning-minimum-level nil)
(setq make-backup-files nil
      auto-save-default nil
      auto-save-list-file-prefix nil)

(save-place-mode 1)
#+end_src
* Register
#+begin_src emacs-lisp
(setq register-preview-delay nil)
(global-set-key (kbd "C-x r j") 'consult-register-load)

;; TODO Write (next-register) and (previous-register)
;; (global-set-key (kbd "C-x r w i") 'window-configuration-to-register)
#+end_src
* Mark
#+begin_src emacs-lisp
(setq set-mark-command-repeat-pop t)
#+end_src
* Window
#+begin_src emacs-lisp
(global-set-key (kbd "C-x w s") 'shrink-window)
(global-set-key (kbd "C-x w m") 'maximize-window)
#+end_src
* UI
** Theme
*** Global theme
#+begin_src emacs-lisp
(use-package doom-themes
   :straight t
   :config
   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
         doom-themes-enable-italic t)
   (doom-themes-visual-bell-config)
   (doom-themes-org-config)
   :init
   (load-theme 'doom-sourcerer t))
#+end_src
*** per-buffer-theme
#+begin_src emacs-lisp
(use-package per-buffer-theme
   :straight t
   :after nov-mode)
#+end_src
** Font
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :font "Andale Mono 14"
                    :weight 'medium)

(set-face-attribute 'variable-pitch nil
                    :font "Andale Mono 14"
                    :weight 'medium)

(set-face-attribute 'fixed-pitch nil
                    :font "Andale Mono 14"
                    :weight 'medium)

(add-to-list 'default-frame-alist '(font . "Andale Mono 14"))
#+end_src

* Keybindings
** Unsetting some default prefix-keys
#+begin_src emacs-lisp
(global-unset-key (kbd "C-x C-b"))
(global-unset-key (kbd "C-x C-v"))
(global-unset-key (kbd "C-x C-o"))
#+end_src
** MISC
#+begin_src emacs-lisp
(when (display-graphic-p)
        (define-key input-decode-map [?\C-m] [C-m])
        (global-set-key (kbd "<C-m>") 'back-to-indentation))

(global-set-key (kbd "<C-m>") 'back-to-indentation)
(global-set-key (kbd "C-x C-. C-e o") #'(lambda () (interactive) (find-file "~/.emacs.d/config.org")))
(global-set-key (kbd "C-x C-. C-e r") #'(lambda () (interactive) (load-file "~/.emacs.d/init.el")))


(global-set-key (kbd "C-x C-b p") 'previous-buffer)
(global-set-key (kbd "C-x C-b n") 'next-buffer)
(global-set-key (kbd "C-x C-b l") 'persp-ibuffer)
(global-set-key (kbd "C-x C-b s") 'consult-buffer)
#+end_src
** macOS
#+begin_src emacs-lisp
(setq mac-option-key-is-meta nil
      mac-command-key-is-meta t
      mac-command-modifier 'meta
      mac-option-modifier 'super)
#+end_src
* OS packages
** osx-lib
#+begin_src emacs-lisp
(use-package osx-lib
  :straight t)
#+end_src
** osx-plist
#+begin_src emacs-lisp
(use-package osx-plist
  :straight t
  :defer t)
#+end_src
** Prevent Emacs from closing
#+begin_src emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src
* Org-mode
** Improving upon org-mode
*** Org-mode
#+begin_src emacs-lisp
  (use-package org
    :straight t
    :config
    (setq org-startup-indented t
          org-directory "~/Journal"
          org-log-into-drawer t
          org-treat-insert-todo-heading-as-state-change t
          org-return-follows-link t
          org-src-tab-acts-natively nil
          org-agenda-files '("~/Agenda/todo.org" "~/Agenda/habits.org")
          org-todo-keywords
          '((sequence "TODO" "FIX" "VERIFY" "REVIEW" "|" "DONE" "DELEGATED" )))
    :hook
    (org-agenda-mode . (lambda () (visual-line-mode -1) (toggle-truncate-lines 1) (display-line-numbers-mode 0))))
#+end_src
*** Org-Capture
#+begin_src emacs-lisp
(global-set-key (kbd "C-x c") 'org-capture)
(setq org-capture-templates
     '(("t" "ToDo" entry (file+headline "~/Agenda/todo.org" "Inbox")
        "* TODO %?\n  %i\n")
        ("h" "Haskell Spec ToDo" entry (file+headline "~/Research/GHC/haskell-specification/note.org" "Tasks")
        "* TODO %?\n  %i\n")))
#+end_src
*** Org-contrib
#+begin_src emacs-lisp
(use-package org-contrib
 :straight t
 :defer t
 :after org
 :config
 (require 'ox-extra)
 (ox-extras-activate '(latex-header-blocks ignore-headlines)))
#+end_src
*** Org-bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :straight t
  :after org)

(add-hook 'org-mode-hook #'(lambda () (org-bullets-mode 1)))
#+end_src
*** Org-tempo
#+begin_src emacs-lisp
(with-eval-after-load 'org
    (require 'org-tempo)
    (setq org-structure-template-alist
         '(("el" . "src emacs-lisp")
           ("py" . "src python")
           ("sq" . "src sql")
           ("hs" . "src haskell")
           ("rs" . "src rust")
           ("c"  . "src c"))))
#+end_src
*** toc-org
#+begin_src emacs-lisp
(use-package toc-org
 :straight t
 :after org
 :hook
 (org-mode . toc-org-mode))
#+end_src
*** org-roam
#+begin_src emacs-lisp
(use-package org-roam
   :straight t
   :after org )
#+end_src
** Productivity
*** Books
#+begin_src emacs-lisp
(use-package org-books
 :straight t
  :defer t
 :config
 (setq org-books-file "~/Agenda/books.org"))
#+end_src
*** Journaling
**** deft
#+begin_src emacs-lisp
(use-package deft
   :straight t
   :config
   (setq deft-directory "~/Journal"
         deft-extensions '("md" "org" "txt")
         deft-recursive t))
#+end_src
**** org-journal
#+begin_src emacs-lisp
(global-unset-key (kbd "C-x C-d"))
(use-package org-journal
   :straight t
   :after org
   :bind
   ("C-x C-d N" . org-journal-new-entry)
   ("C-x C-d n" . org-journal-next-entry)
   ("C-x C-d p" . org-journal-previous-entry)
   ("C-x C-d s" . org-journal-search)
   ("C-x C-d e" . (lambda () (interactive) (find-file "~/Journal/emacs.org")))
   :config
   (setq org-journal-date-prefix "#+TITLE: "
         org-journal-dir "~/Journal"
         org-journal-time-prefix "* "
         org-journal-date-format "%a, %Y-%m-%d"
         org-journal-file-format "%Y-%m-%d.org"))
#+end_src
* Media
** emms
#+begin_src emacs-lisp
(use-package emms :straight t :defer t)
#+end_src
** empv
#+begin_src emacs-lisp
   (use-package empv :straight t :defer t)


   (setq episodes-audio-directory "/Users/artin/Podcast/Haskell Interlude/Episodes/"
         episodes-notes-directory "/Users/artin/Podcast/Haskell Interlude/Notes/"
         default-description "Volume drop")


   (defun timestamp-to-MM-SS (timestamp)
      "Convert seconds to MM:SS format"
      (let* ((seconds (% timestamp 60))
             (minutes (/ (- timestamp seconds) 60))
             (prettify-time (lambda (x) (if (< x 10) (concat "0" (number-to-string x)) (number-to-string x))))
             (seconds-pretty (funcall prettify-time seconds))
             (minutes-pretty (funcall prettify-time minutes)))
       (concat minutes-pretty ":" seconds-pretty)))

   ;; NOTE You don't need to revert the buffer or anything. just set is as the buffer, use save-excursion, and swich back to the current buffer. Very easy.
   (defun write-timerange (buffer &optional description)
       "Write the timestamp of the currently playing episode to its note file"
       (interactive)
       (let* ((timestamp (empv--send-command-sync (list 'get_property 'time-pos)))
             (timestamp-range (concat (timestamp-to-MM-SS (- (truncate timestamp) 1))
                                      " -- "
                                      (timestamp-to-MM-SS (+ (truncate timestamp) 1)))))

           (save-excursion (with-current-buffer (get-buffer-create buffer)
                                (if description
                                   (insert (concat timestamp-range " : " description "\n"))
                                   (insert (concat timestamp-range " : " default-description "\n")))))))


      (defun timestamp-of-episode ()
     (let ((timestamp (empv--send-command-sync (list 'get_property 'time-pos))))
                (timestamp-to-MM-SS (truncate timestamp))))

   (defun episode-note-buffer ()
     (file-name-nondirectory (empv--send-command-sync (list 'get_property 'filename/no-ext))))

   (defun write-to-episode-note-buffer (&optional description)
     (interactive)
     (write-timerange (episode-note-buffer) description))

    (defun open-episode-note-buffer () (interactive) (switch-to-buffer (episode-note-buffer)))

  (global-set-key (kbd "C-x C-v i") 'write-to-episode-note-buffer)
  (global-set-key (kbd "C-x C-v t") #'(lambda () (interactive) (message (timestamp-of-episode))))
  (global-set-key (kbd "C-x C-v p") 'write-to-episode-note-buffer-prompt)
  (global-set-key (kbd "C-x C-v o") 'open-episode-note-buffer)
#+end_src
* Tools
** perspective
#+begin_src emacs-lisp
  (use-package perspective
    :straight t
    :custom
    (persp-mode-prefix-key (kbd "C-x C-,"))
    :init
    (persp-mode))
#+end_src
** project
#+begin_src emacs-lisp
(global-set-key (kbd "C-x p /") 'consult-ripgrep)
#+end_src
** diredfl
#+begin_src emacs-lisp
(use-package diredfl
  :straight t
  :init
  (diredfl-global-mode))
#+end_src
** transpose
#+begin_src emacs-lisp
(use-package transpose-frame :straight t :bind ("C-x T" . transpose-frame))
#+end_src
** ace-window
#+begin_src emacs-lisp
(use-package ace-window
        :straight t
        :config
        (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
        (setq aw-dispatch-always t)
        :bind ("M-o" . ace-window))
#+end_src
** avy
#+begin_src emacs-lisp
(use-package avy
    :straight t
    :config (avy-setup-default)
    :bind ("C-;" . avy-goto-char-in-line)
          ("M-g M-c" . avy-goto-char-2)
          ("M-g M-l" . avy-goto-line)
          ("M-g M-w" . avy-goto-word-1))
#+end_src
** hydra
#+begin_src emacs-lisp
(use-package hydra :straight t :defer t)
#+end_src
** multiple-cursors
#+begin_src emacs-lisp
(use-package multiple-cursors :straight t)
#+end_src
** vundo
#+begin_src emacs-lisp
(use-package vundo :straight t)
#+end_src
** magit
#+begin_src emacs-lisp
(use-package magit
  :straight t
  :defer t
  :commands magit-status)
#+end_src
** eglot
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
  (use-package eglot
    :straight t
    :commands eglot
    :config
    (setq-default eglot-workspace-configuration
          '((haskell (plugin (stan (globalOn . :json-false)))))))

#+end_src
** smartparens
#+begin_src emacs-lisp
(global-unset-key (kbd "C-M-u"))
(global-unset-key (kbd "C-M-m"))


(use-package smartparens
  :straight t
  :config
  (require 'smartparens-haskell)
  (require 'smartparens-config)
  :bind
  ("C-M-a" . sp-beginning-of-sexp)
  ("C-M-e" . sp-end-of-sexp)
  ("M-["   . sp-backward-down-sexp)
  ("C-M-[" . sp-backward-up-sexp)
  ("M-]"   . sp-down-sexp)
  ("C-M-]" . sp-up-sexp)
  ("C-M-f" . sp-forward-sexp)
  ("C-M-b" . sp-backward-sexp)
  ("C-M-n" . sp-next-sexp)
  ("C-M-p" . sp-previous-sexp)
  ("C-S-b" . sp-backward-symbol)
  ("C-S-f" . sp-forward-symbol)
  ("C-M-k" . sp-kill-sexp)
  ("C-M-u" . sp-forward-slurp-sexp)
  ("C-S-u" . sp-backward-slurp-sexp)
  ("C-M-y" . sp-forward-barf-sexp)
  ("C-S-y" . sp-backward-barf-sexp)
  ("C-M-w" . sp-copy-sexp)
  ("C-c (" . sp-wrap-round)
  ("C-c [" . sp-wrap-square)
  ("C-c {" . sp-wrap-curly)
  ("C-c u" . sp-unwrap-sexp)
  ("C-M-j" . sp-join-sexp)
  ("C-M-g" . sp-split-sexp)
  ("C-c U" . sp-backward-unwrap-sexp)
  :hook
  (prog-mode . smartparens-strict-mode)
  :init
  (show-smartparens-global-mode))
#+end_src
** hl-todo
#+begin_src emacs-lisp
(use-package hl-todo
  :straight t
  :init
  (global-hl-todo-mode))
#+end_src
** vertico
#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :bind (:map vertico-map
            ("C-n" . vertico-next)
            ("C-p" . vertico-previous))
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))
#+end_src
** savehist
#+begin_src emacs-lisp
(use-package savehist
    :straight t
    :init
    (savehist-mode))
#+end_src
** orderless
#+begin_src emacs-lisp
(use-package orderless
  :straight t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
** Terminal
*** term
#+begin_src emacs-lisp
(add-hook 'term-mode-hook #'(lambda () (display-line-numbers-mode -1)))
(setq explicit-shell-file-name "zsh")
#+end_src
*** vterm
#+begin_src emacs-lisp
(use-package vterm
  :straight t
  :defer t
  :bind
  ("s-\\" . vterm)
  ("s-<return>" . vterm-other-window)
  :config
  (add-hook 'vterm-mode-hook #'(lambda () (display-line-numbers-mode -1))))
#+end_src
*** eshell
#+begin_src emacs-lisp
  (add-hook 'eshell-mode-hook #'(lambda () (display-line-numbers-mode -1)))
#+end_src
** dumb-jump
#+begin_src emacs-lisp
(use-package dumb-jump
    :straight t
    :config
    (setq dumb-jump-force-searcher 'ag)) ;; TODO Use rg with custom rules for faster search results
#+end_src
** xref
#+begin_src emacs-lisp
(use-package xref
  :straight t
  :config
  (setq xref-prompt-for-identifier nil))

(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
#+end_src
** tab
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default default-tab-width 4)
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
#+end_src
** embark
#+begin_src emacs-lisp
(use-package embark
    :straight t
    :bind
    (:map minibuffer-mode-map
    ("C-." . embark-act))
    :config
    (setq prefix-help-command #'embark-prefix-help-command))
#+end_src
** consult
#+begin_src emacs-lisp
(use-package consult
   :straight t
   :bind
   ("M-g i" . consult-imenu)
   ("M-s s" . consult-line))

(setq completion-in-region-function
      (lambda (&rest args)
        (apply (if vertico-mode
                   #'consult-completion-in-region
                 #'completion--in-region)
               args)))

(setq xref-show-xrefs-function #'consult-xref
      xref-show-definitions-function #'consult-xref)
#+end_src
*** consult-eglot
#+begin_src emacs-lisp
(use-package consult-eglot
  :straight t
  :after eglot)
#+end_src
*** embark-consult
#+begin_src emacs-lisp
(use-package embark-consult :straight t)
#+end_src
** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :straight t
  :init
  (marginalia-mode))
#+end_src
* Document
** olivetti
#+begin_src emacs-lisp
(use-package olivetti :straight t)
#+end_src
** nov
#+begin_src emacs-lisp
(use-package nov
   :straight t
   :defer t
   :mode
   (("\\.epub\\'" . nov-mode))
   :hook
   (nov-mode . (lambda () (display-line-numbers-mode -1)))
   (nov-mode . olivetti-mode))
#+end_src
** pdf-tools
#+begin_src emacs-lisp
(use-package pdf-tools
  :straight t
  :defer t
  :init
  (pdf-tools-install)
  :bind
  (:map pdf-view-mode-map ("g" . revert-buffer-quick))
  :hook
  (pdf-view-mode . (lambda () (display-line-numbers-mode -1)))
  :config
  (auto-revert-mode 1)
  (setq auto-revert-verbose nil
        pdf-view-use-scaling t))
#+end_src
* Programming Languages
** Haskell
*** flymake-hlint
#+begin_src emacs-lisp
(use-package flymake-hlint :straight t)
#+end_src
*** hindent
#+begin_src emacs-lisp
(use-package hindent
  :straight t
  :after haskell-mode)
#+end_src
*** haskell-mode
#+begin_src emacs-lisp
(use-package haskell-mode
  :straight t
  :config
  (setq haskell-font-lock-symbols t
        haskell-stylish-on-save nil
        haskell-process-log nil)
  :bind
  (:map haskell-mode-map
        ("C-c h" . hoogle)
        ("C-c f" . haskell-mode-stylish-buffer)
        ("C-x p C" . haskell-compile))

  :hook
  (haskell-mode . haskell-auto-insert-module-template)
  (haskell-mode . interactive-haskell-mode)
  (haskell-mode . haskell-indentation-mode)
  (haskell-mode . haskell-decl-scan-mode)
  (haskell-mode . hindent-mode))
  ;; (haskell-mode . flymake-mode)
  ;; (haskell-mode . flymake-hlint-load))
#+end_src
** Agda
#+begin_src elisp
(setq agda-mode-directory
      (file-name-directory (substring (shell-command-to-string "agda-mode locate") 0 -1)))

;; Add the directory containing agda2-mode.el to load-path
(add-to-list 'load-path agda-mode-directory)

;; Use-package configuration for agda2-mode
(use-package agda2-mode
  :ensure nil
  :commands agda2-mode
  :mode (("\\.agda\\'" . agda2-mode)
         ("\\.lagda.md\\'" . agda2-mode)))
#+end_src
** ELisp
#+begin_src emacs-lisp
#+end_src
** OCaml
#+begin_src emacs-lisp
(use-package tuareg-mode
    :straight t
    :defer t)

(use-package merlin
    :straight t
    :after tuareg-mode)

#+end_src
** Lean
#+begin_src emacs-lisp
(use-package lean4-mode
  :straight (lean4-mode
	     :type git
	     :host github
	     :repo "leanprover/lean4-mode"
	     :files ("*.el" "data"))
  ;; to defer loading the package until required
  :defer t
  :commands (lean4-mode))
#+end_src
** Nix
#+begin_src emacs-lisp
(use-package nix-mode
   :straight t
   :defer t)

(global-set-key (kbd "C-x C-. C-n o") #'(lambda () (interactive) (find-file "~/.nixpkgs/darwin-configuration.nix")))

(defun darwin-rebuild-switch () ())
(defun nix-channel-update () ())
(defun nix-collect-garbage-d () ())
#+end_src
** Javascript
#+begin_src emacs-lisp
(use-package js2-mode
    :straight t
    :defer t)
#+end_src
** Python
#+begin_src emacs-lisp
 ;; (use-package python-mode
 ;;  :straight t
 ;;  :defer t)
#+end_src
** Swift
#+begin_src emacs-lisp
(use-package swift-mode
    :straight t
    :defer t)
#+end_src
* Data Serialization
** JSON
#+begin_src emacs-lisp
(use-package json-mode
  :straight t
  :defer t)
#+end_src
** YAML
#+begin_src emacs-lisp
(use-package yaml-mode
  :straight t)
#+end_src
** csv
#+begin_src emacs-lisp
(use-package csv-mode
  :straight t)
#+end_src
* Password management
** pass
#+begin_src emacs-lisp
(use-package pass
  :straight t
  :commands pass)
#+end_src
* Shell
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-. C-z r") #'(lambda () (interactive) (find-file "~/.zshrc")))
(global-set-key (kbd "C-x C-. C-z p") #'(lambda () (interactive) (find-file "~/.zprofile")))
(global-set-key (kbd "C-x C-. C-z e") #'(lambda () (interactive) (find-file "~/.zshenv")))
#+end_src
* Markup languages
** Tex
*** cdlatex
#+begin_src emacs-lisp
(use-package cdlatex
    :straight t)
#+end_src
*** auctex
#+begin_src emacs-lisp
(use-package auctex
    :straight t
    :hook
    (LaTeX-mode . reftex-mode)
    (LaTeX-mode . cdlatex-mode)
    :mode
    ("\\.tex\\'" . LaTeX-mode)
    ("\\.mng\\'" . LaTeX-mode)
    ("\\.lhs\\'" . LaTeX-mode))
#+end_src
** ott
#+begin_src emacs-lisp
(use-package ott-mode
    :ensure nil
    :load-path "~/.emacs.d/ott-mode")
#+end_src
** markdown-mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :straight t)
#+end_src
** rst-mode
#+begin_src emacs-lisp
(setq rst-pdf-program "/Applications/Skim.app/Contents/MacOS/Skim")
#+end_src
* Messaging and mail
** ement
#+begin_src emacs-lisp
(use-package ement
    :straight t
    :defer t)
#+end_src
** mu4e
** telega
#+begin_src emacs-lisp
  (use-package telega
      :straight t
      :defer t
      :config
      (setq telega-chat-bidi-display-reordering t)
      (setq telega-server-libs-prefix "/usr/local")
      :hook
      (telega-chat-mode . (lambda () (display-line-numbers-mode -1)))
      (telega-root-mode . (lambda () (display-line-numbers-mode -1))))
#+end_src
* RSS
** elfeed
#+begin_src emacs-lisp
(use-package elfeed
  :straight t
  :defer t
  :config
  (setq elfeed-feeds nil))
#+end_src
* Profiling
#+begin_src emacs-lisp
(use-package esup
  :straight t)
#+end_src
