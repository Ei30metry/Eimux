;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(org-tags-history coding-system-history junk-hist lsp-rename-history input-method-history consult--grep-history keymap-name-history command-history org-link--history eww-prompt-history consult-imenu--history swiper-history consult--minor-mode-menu-history xref--read-identifier-history consult--find-history ivy-history imenu--history-list read-char-history compile-history pdf-annot-color-history regexp-history grep-history shell-command-history woman-topic-history read-expression-history eglot-command-history buffer-name-history magit-revision-history yes-or-no-p-history empty-history minibuffer-history evil-ex-history file-name-history extended-command-history))
(setq org-tags-history '(":Research:Tooling" "Research" "Work"))
(setq lsp-rename-history '("Blah"))
(setq consult--grep-history '("#type TcSigmaType" "#sigma" "#defns" "#Pattern synonym" "#\\[Evidence: " "#type EvVar" "#data HsWrapper"))
(setq keymap-name-history '("agda2-mode-map" "agda2-goal-map" "agda2-mode-map" "haskell-interactive-mode-map" "org-mode-map" "haskell-interactive-mode-map" "haskell-mode-map" "inferior-haskell-mode-map" "haskell-debug-mode-map" "haskell-interactive-mode-map" "interactive-haskell-mode-map" "swiper-map" "interactive-haskell-mode-map" "consult-isearch-history-map" "consult-narrow-map" "consult-async-map" "haskell-mode-map" "interactive-haskell-mode-map" "haskell-mode-map" "org-mode-map" "interactive-haskell-mode-map" "haskell-mode-map" "haskell-mode-menu" "haskell-mode-map"))
(setq command-history '((evil-record-macro 90) (evil-record-macro 90) (dired "~/.config/haskmacs/" nil) (dired "~/.config/haskmacs/" nil) (ido-dired) (execute-extended-command nil "ido-dired" "dired") (dired "~/.config/haskmacs/early-init.el" nil) (dired "~/.config/haskmacs/transient/" nil) (dired "~/.config/haskmacs/" nil) (evil-org-delete 11433 11438 'exclusive) (describe-symbol 'major-mode) (execute-extended-command nil "describe-symbol" "des") (dired "~/.config/haskmacs/" nil) (evil-find-char nil 39) (find-file "~/.config/haskmacs/config.org" t) (evil-record-macro 32) (evil-org-> 211 340) (evil-org-> 133 210) (evil-org-> 10 127) (find-file "~/Agenda/plan.org" t) (evil-org-delete 16031 16035 'exclusive) (find-file "~/.config/haskmacs/config.org" t) (evil-record-macro 32) (straight-rebuild-all) (execute-extended-command nil "straight-rebuild-all") (evil-record-macro 32) (evil-record-macro 32) (find-file "~/.config/haskmacs/transient/history.el" t) (find-file "~/.config/haskmacs/.gitignore" t) (find-file "~/.config/haskmacs/.gitignore" t) (find-file "~/.config/haskmacs/straight/" t) (find-file "~/.config/haskmacs/.gitignore" t) (find-file "~/.config/haskmacs/.gitignore" t) (evil-replace 16367 16368 'exclusive 53) (evil-org-delete 16371 16385 'inclusive) (find-file "~/.config/haskmacs/config.org" t) (find-file "~/.config/haskmacs/config.org" t) (evil-org-delete 16031 16034 'exclusive) (evil-org-delete 16031 16032 'exclusive) (evil-org-delete 16031 16034 'exclusive) (evil-org-delete 16030 16034 'exclusive) (evil-org-delete 16030 16031 'exclusive) (find-file "~/.config/haskmacs/config.org" t) (find-file "~/.config/haskmacs/config.org" t) (evil-find-char nil 32) (straight-rebuild-all) (execute-extended-command nil "straight-rebuild-all" "straight-rebuild") (straight-pull-all nil) (execute-extended-command nil "straight-pull-all" "straight") (straight-check-all) (execute-extended-command nil "straight-check-all" "straigth") (all-the-icons-install-fonts nil) (execute-extended-command nil "all-the-icons-install-fonts" "all-the-icons-inst") (nerd-icons-install-fonts nil) (execute-extended-command nil "nerd-icons-install-fonts" "install-") (evil-set-marker 106) (evil-record-macro 90) (evil-org-delete 19648 19665 'exclusive) (check-parens) (execute-extended-command nil "check-parens" "check-pa") (straight-check-all) (execute-extended-command nil "straight-check-all") (evil-org-delete 18206 18219 'inclusive) (find-file "~/.config/haskmacs/config.org" t) (evil-record-macro 107) (persp-switch-to-buffer "*Messages*") (persp-switch-to-buffer "*Messages*") (find-file "~/.config/haskmacs/config.org" t) (evil-org-delete 18239 18252 'inclusive) (find-file "~/.config/haskmacs/config.org" t) (find-file "~/.config/haskmacs/early-init.el" t) (evil-delete 259 295 'line) (find-file "~/.config/haskmacs/early-init.el" t) (find-file "~/.config/haskmacs/early-init.el" t) (find-file "~/.config/haskmacs/config.org" t) (describe-symbol 'jit-lock-defer-time) (find-file "~/.config/haskmacs/config.org" t) (find-file "~/.config/haskmacs/config.org" t) (find-file "~/.config/haskmacs/config.org" t) (find-file "~/.config/haskmacs/config.org" t) (straight-check-all) (execute-extended-command nil "straight-check-all" "straight-ch") (straight-fetch-all nil) (execute-extended-command nil "straight-fetch-all" "straight-p") (evil-delete 3176 3223 'line) (evil-org-delete 17023 17060 'line) (evil-org-delete 17141 17159 'line) (evil-org-delete 17057 17060 'exclusive) (evil-org-> 17023 17060) (evil-org-> 17023 17068) (evil-org-delete 17068 17069 'line) (evil-org-delete 17023 17073 'line) (find-file "~/.config/haskmacs/config.org" t) (evil-delete 3176 3223 'line) (doom-modeline-mode 'toggle) (execute-extended-command nil "doom-modeline-mode" "doom") (find-file "~/Programming/projects/ghc/compiler/GHC/Tc/Utils/Env.hs" t) (doom-modeline-mode 'toggle) (execute-extended-command nil "doom-modeline-mode" "doom") (flymake-mode 'toggle)))
(setq eww-prompt-history '("https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/poly_kinds" "https:/ghc.gitlab.haskell.org/ghc/doc/user_guide/exts/poly_kinds.html" "configuring pdf-tools for better pdf viewing experience in emacs"))
(setq consult-imenu--history '("Keybidings Config" "UI Dashboard" "Org-mode Improving upon org-mode" "UI Daihboard" "UI Dashboard" "UI Theme" "UI Dashboard" "isSigmaTy" "Keybidings Config" "Inbox Do three 90 minute parts" "Tools PDF tools" "Inbox Finish editing Episode 2" "Keybidings Config" "Programming Languages Haskell" "Org-mode Improving upon org-mode" "Inbox Email Richard about your progress and plans" "Datatypes EvId" "Keybidings Config" "Inbox Finish editing Episode 2" "UI Theme" "Keybidings Config" "f" "Keybidings Config" "f" "Keybidings Config" "Programming Languages Haskell" "Initial modes" "Keybidings Config" "Programming Languages Haskell" "Keybidings Config" "EVIL Mode Evil" "Keybidings Config" "matchExpectedFunTys" "instantiateSigma" "Datatypes InferMode" "simplifyInfer"))
(setq swiper-history '("ad" #(" #+end_src" 0 1 (display "14  " swiper-line-number 14 ivy-index 13) 1 10 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) face org-block-end-line font-lock-multiline t font-lock-fontified t fontified t ivy-index 13)) #(" #+begin_src emacs-lisp" 0 1 (display "8   " swiper-line-number 8 ivy-index 7) 1 23 (wrap-prefix #("    " 0 4 (face org-indent)) line-prefix #("    " 0 4 (face org-indent)) face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t ivy-index 7)) "Haskell" #("ad" 0 2 (ivy-index 0)) #("haskell" 0 7 (ivy-index 0)) #("haskel" 0 6 (ivy-index 0)) #("      :keymaps 'interactive-haskell-mode-map" 0 1 (swiper-line-number 255 display "255 ") 1 44 (fontified nil line-prefix #("    " 0 4 (face org-indent)) wrap-prefix #("         " 0 4 (face org-indent) 4 9 (face org-indent)))) "data" #(" extendVarEnv = undefined " 0 1 (display "64  " swiper-line-number 64 ivy-index 63) 1 13 (face haskell-definition-face fontified t ivy-index 63) 13 14 (fontified t ivy-index 63) 14 15 (face haskell-operator-face syntax-table (1) fontified t ivy-index 63) 15 16 (fontified t ivy-index 63) 16 25 (composition (4 9 [8869]) fontified t ivy-index 63) 25 26 (fontified t ivy-index 63))))
(setq consult--minor-mode-menu-history '("org-src-mode"))
(setq imenu--history-list '("*Rescan*" "intType"))
(setq read-char-history '("Q"))
(setq compile-history '("make " "make all" "make ott"))
(setq grep-history '("grep processRequest"))
(setq read-expression-history '("w"))
(setq eglot-command-history '("haskell-language-server-wrapper" "haskell-language-server-wrapper --lsp" "haskell-language-server-wrapper-1.8.0.0 --lsp" "haskell-language-server-wrapper" "haskell-language-server-wrapper --lsp"))
(setq buffer-name-history '("*Messages*" "Makefile" "*vterm*" "note.org" "ott" "playground" "Makefile" "config.org" "*vterm*" "Makefile<stlc1>" "*Agda information*" "*dashboard*" "Relations.agda" "config.org" "Relations.agda" "config.org" "PolyKinds.hs" "*Async-native-compile-log*" "*straight-process*" "*Messages*" "TypeVariablesInPat.hs" "*agda2*" "config.org" "StandaloneKindSignatures.hs" "config.org" "StandaloneKindSignatures.hs" "config.org" "*dashboard*" "StandaloneKindSignatures.hs" "config.org" "*new*<3>" "plan.org" "config.org" "*playground*" "poly_kinds.rst" "Tester.hs" "config.org" "*playground*" "Tester.hs" "poly_kinds.rst" "Tester.hs" "poly_kinds.rst" "Tester.hs" "*playground*" "PolyKinds.hs" "*playground*" "Agenda" "src" "todo.org<Agenda>" "*WoMan-Log*" "*Compile-Log*" "*dashboard*" "note.org" "Main.hs" "note.org" "Miguel de Cervantes - Don Quixote.pdf" "*dashboard*" "Miguel de Cervantes - Don Quixote.pdf" "MyLib.hs" "*vterm*" "config.org" "*Messages*" "*dashboard*" "*scratch*" "*Messages*" "Impredicatvity.hs" "config.org" "*Messages*" "*haskell-mode*" "*scratch*" "*dashboard*" "*Messages*" "Test.hs" "*new*<2>" "Test.hs" "requirements.org" "IPTypes.hs" "Test.hs" "*Messages*" "*scratch*" "*GNU Emacs*" "*new*" "requirements.org" "*haskell-mode*" "*new*" "*scratch*" "*Messages*" "*GNU Emacs*" "*haskell*" "SunTimes.hs" "*haskell*" "Compute.hs" "ghcid.el" "*haskell*" "*lsp-haskell*" "*GNU Emacs*" "*Messages*" "*scratch*" "config.org" "*lsp-performance*"))
(setq magit-revision-history '("dhaskell/QL" "QL"))
(setq yes-or-no-p-history '("yes" "no" "no " "yes" " no" "yes" "no" "yes" " yes" "y" "yes" ":w" "yes" "no" "yes" "y" "yes"))
(setq minibuffer-history '("major-mode" "jit-lock-defer-time" "major-mode" ":w" "emacs-lisp-mode" "pdf-tools-modes" "use-package" "global-visual-line-mode" "add-hook" "major-mode" "unless" "major-mode" "global-display-line-numbers-mode" "major-mode" "unless" "major-mode" "global-visual-line-mode" "pdf-view-incompatible-modes" "Dune" "Waking Up" "plfa.part1.Relations" "Relations" "Decidable" "Apply hint \"Unused LANGUAGE pragma\"" "A Quick Look at Impredicativity" "Type Variables in Patterns" "haskell-process-do-try-info" "build" "playground/src/StandaloneKindSignatures.hs" "helpful" "haskell-mode" "haskell-interactive-mode" "define-key" "playground" "Giving Haskell a Promotion" "haskell-mode" "*playground*" "playground" "-mode-map$" "Hoorsa" "expand-file-name" "config.el" "playground" "wombat" "tango" "doom-nord" "https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/strict.html#extension-BangPatterns" "dfaf" "http://BangPatterns" "https:" "kbd" "eglot" "native-comp-available-p" "native-compile" "package-initialize" "define-generic-mode" "a" "doom-meltbus" "nord" "evil-want-integration" "doom-nord" "nord" "kosmos" "eziam-dark" "almost-mono-black" "use-package" "smooth-scroll" "smooth-scrolling" "White" "Green" "eltbus" "almost-mono-black" "almost-mono-gray" "almost-mono-black" "sexy-monochrome" "eziam-dark" "minimal-black" "kosmos" "sexy-monochrome-theme" "package-initialize" "enwc" "\\bN \\r" "(n + m * n) * p \\==\\<\\> ? " "\\==\\<\\> x" "\\==\\<\\>" "hcel" "ip" "mymtl" "haskell" "python-mode" "flycheck-haskell" "lsp-latex" "pdf-tools" "projectile" "vterm-toggle" "vterm" "projectile" "eglot" "haskell-mode" "projectile"))
(setq evil-ex-history '("w" "w:w" "w" "w:w" "w" "we" "w" "'<,'>w" #("w" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("we" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("r" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("r" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("qw" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("qw" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("'<,'>w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("'<,'>w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("W" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("e" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("W" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("'<,'>w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("r" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("'<,'>s/data/newtype" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9) 9 10 (ex-index 10) 10 11 (ex-index 11) 11 12 (ex-index 12) 12 13 (ex-index 13) 13 14 (ex-index 14) 14 15 (ex-index 15) 15 16 (ex-index 16) 16 17 (ex-index 17) 17 18 (ex-index 18) 18 19 (ex-index 19)) #("w" 0 1 (ex-index 1)) #("'<,'>w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("'<,'>w" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("vterm" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5)) #("w" 0 1 (ex-index 1))))
(setq file-name-history '("~/.config/haskmacs/" "~/.config/haskmacs/early-init.el" "~/.config/haskmacs/transient/" "~/.config/haskmacs/" "~/.config/haskmacs/config.org" "~/Agenda/plan.org" "~/.config/haskmacs/config.org" "~/.config/haskmacs/transient/history.el" "~/.config/haskmacs/.gitignore" "~/.config/haskmacs/straight/" "~/.config/haskmacs/.gitignore" "~/.config/haskmacs/config.org" "~/.config/haskmacs/early-init.el" "~/.config/haskmacs/config.org" "~/Programming/projects/ghc/compiler/GHC/Tc/Utils/Env.hs" "~/Programming/projects/ghc/compiler/GHC/Tc/Utils/" "~/Programming/projects/ghc/compiler/GHC/Tc/Gen/Expr.hs" "~/Agenda/todo.org" "~/Programming/practicing/Make/12/Makefile" "~/Research/GHC/haskell-specification/Makefile" "~/Programming/practicing/Make/11/Makefile" "~/Programming/practicing/Make/10/Makefile" "~/Programming/practicing/Make/9/Makefile" "~/Research/GHC/haskell-specification/Makefile" "~/Programming/practicing/Make/8/Makefile" "~/Programming/practicing/Make/7/Makefile" "~/Programming/practicing/Make/6/Makefile" "~/Programming/practicing/Make/5/Makefile" "~/Programming/practicing/Make/4/Makefile" "~/Programming/practicing/Make/3/Makefile" "~/Programming/practicing/Make/2/Makefile" "~/Programming/practicing/Make/1/blah.c" "~/Programming/practicing/Make/Makefile" "~/Programming/practicing/Make/1/blah.c" "~/Programming/practicing/Make/1/Makefile" "~/Programming/practicing/Make/Makefile" "~/.config/haskmacs/config.org" "~/Programming/practicing/Make/Makefile" "~/Downloads/ott manual.pdf" "~/.config/haskmacs/config.org" "~/Agenda/todo.org" "~/Research/GHC/haskell-specification/grammar.ott" "~/Research/GHC/haskell-specification/rules.ott" "~/Research/GHC/haskell-specification/grammar.ott" "~/Research/GHC/Visible-Forall/impred-new-idea/paper/impredicativity.mng" "~/Research/GHC/haskell-specification/haskell.mng" "~/Research/GHC/haskell-specification/ott.tex" "~/Research/GHC/haskell-specification/.git/COMMIT_EDITMSG" "~/Research/GHC/haskell-specification/haskell.mng" "~/Research/GHC/haskell-specification/ottall.pdf" "~/Research/GHC/haskell-specification/ottall.tex" "~/Research/GHC/haskell-specification/.git/COMMIT_EDITMSG" "~/Research/GHC/haskell-specification/" "~/Research/GHC/haskell-specification/haskell.mng" "~/Research/GHC/haskell-specification/grammar.ott" "~/Research/GHC/haskell-specification/haskell.pdf" "~/Research/GHC/haskell-specification/haskell.mng" "~/Research/GHC/haskell-specification/grammar.ott" "~/Programming/practicing/Ott/myStlc/Makefile" "~/Programming/practicing/Ott/playground/Makefile" "~/Programming/practicing/Ott/playground/test2.ott" "~/Programming/practicing/Ott/playground/note.org" "~/Programming/practicing/Ott/playground/test2.ott" "~/Programming/practicing/Ott/playground/" "~/Programming/practicing/Ott/playground/test2.tex" "~/Programming/practicing/Ott/" "~/Programming/learning/ott/" "~/Programming/learning/ott/out.tex" "~/Programming/learning/ott/test.ott" "~/Programming/learning/ott/note.org" "~/Programming/learning/ott/ott-tutorial/stlc4/core.ott" "~/Programming/learning/ott/ott-tutorial/stlc4/rules.ott" "~/Research/GHC/haskell-specification/ottall.tex" "~/Research/GHC/haskell-specification/haskell.mng" "~/Research/GHC/haskell-specification/grammar.ott" "~/Research/GHC/haskell-specification/haskell.mng" "~/Research/GHC/haskell-specification/haskell.pdf" "~/.config/haskmacs/config.org" "~/Research/GHC/haskell-specification/haskell.pdf" "~/Research/GHC/haskell-specification/haskell.mng" "~/Research/GHC/haskell-specification/grammar.ott" "~/Research/GHC/haskell-specification/haskell.mng" "~/Research/GHC/haskell-specification/rules.ott" "~/Research/GHC/haskell-specification/grammar.ott" "~/Agenda/todo.org" "~/Research/GHC/haskell-specification/playground/src/ImpredicativeTypes.hs" "~/Research/GHC/haskell-specification/.gitlab-ci.yml" "~/Research/GHC/haskell-specification/grammar.ott" "~/Research/GHC/haskell-specification/ottalt.sty" "~/Research/GHC/haskell-specification/rules.ott" "~/Research/GHC/haskell-specification/grammar.ott" "~/Programming/learning/ott/ott-tutorial/stlc4/rules.ott" "~/Programming/learning/ott/ott-tutorial/stlc3/rules.ott" "~/Programming/learning/ott/ott-tutorial/stlc2/rules.ott" "~/Programming/learning/ott/ott-tutorial/stlc1/rules.ott" "~/Programming/practicing/Ott/myStlc/rules.ott" "~/Programming/practicing/Ott/myStlc/grammar.ott" "~/Downloads/ott manual.pdf" "~/.config/haskmacs/config.org" "~/Agenda/todo.org"))
(setq extended-command-history '("ido-dired" "describe-symbol" "straight-rebuild-all" "straight-pull-all" "straight-check-all" "all-the-icons-install-fonts" "nerd-icons-install-fonts" "check-parens" "straight-check-all" "straight-fetch-all" "doom-modeline-mode" "flymake-mode" "eglot-shutdown" "eglot" "eglot-find-implementation" "eglot" "projectile-compile-project" "project-compile" "eglot" "evil-window-new" "org-set-tags-command" "eglot" "display-line-numbers-mode" "visual-line-mode" "display-line-numbers-mode" "visual-line-mode" "display-line-numbers-mode" "global-display-line-numbers-mode" "makefile-mode-menu" "visual-line-mode" "line-number-mode" "describe-function" "describe-symbol" "eglot" "project-compile" "eglot" "project-compile" "agda2-restart" "agda2-term" "agda2-decl-beginning" "agda2-module-contents" "agda2-autoOne" "agda2-module-contents" "eglot-shutdown" "eglot" "eglot-shutdown" "eglot" "eglot-stderr-buffer" "xref-show-location-at-point" "xref-find-references" "xref-next-line" "xref-goto-xref" "eglot-manual" "eglot-find-declaration" "eglot-find-implementation" "eglot-inlay-hints-mode" "eglot-code-action-organize-imports" "eglot-list-connections" "eglot-find-implementation" "eglot-events-buffer" "eglot-find-implementation" "eglot-find-typeDefinition" "eglot-find-implementation" "eglot-find-declaration" "eglot-events-buffer" "eglot-manual" "flymake-mode" "eglot" "eglot-code-actions" "eglot-format" "eglot" "eglot-menu" "eglot" "lsp-rename" "lsp" "lsp-doctor" "straight-rebuild-all" "package-upgrade-all" "pixel-scroll-precision-mode" "straight-pull-all" "nerd-icons-install-fonts" "font-show-log" "view-echo-area-messages" "projectile-add-known-project" "package-upgrade-all" "magit-status" "project-compile" "agda2-mode" "haskell-interactive-mode" "haskell-mode" "magit-status" "org-insert-link" "org-super-agenda-mode" "version" "server-start" "counsel-grep-or-swiper" "isearch-occur" "swiper-from-isearch" "swiper-avy" "swiper-mc"))
(setq tablist-named-filter 'nil)
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("/Users/artin/.config/haskmacs/" (0 0 . [nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil]) "/Users/artin/Research/GHC/haskell-specification/" (1 16 . ["make ott" "make clean" "make all" "make clean " "make all " "make clean" "make all" "make clean" "make all" "make clean " "make all" "make clean" "make all" "make ott" "make clean " "make all "]))))
(setq evil-jumps-history '((488 #2="~/.config/haskmacs/") (154 #1="/Users/artin/.config/haskmacs/.gitignore") (1 #1#) (301 #2#) (11432 #4="/Users/artin/.config/haskmacs/config.org") (106 #3="~/.config/haskmacs/") (1059 "~/.config/") (106 #3#) (11432 #4#) (193 "~/.config/haskmacs/transient/") (11432 #4#) (1401 #2#) (11432 #4#) (1401 #2#) (11451 #4#) (11449 #4#) (1320 #4#) (1298 #4#) (361 "/Users/artin/Agenda/plan.org") (15935 #5="/Users/artin/.config/haskmacs/config.org") (1 #5#) (121 #6="/Users/artin/.config/haskmacs/.gitignore") (81 #6#) (147 "~/.config/haskmacs/straight/") (71 #6#) (1 #6#) (1 "/Users/artin/.config/haskmacs/config.org") (1 "/Users/artin/.config/haskmacs/config.org") (15798 #7="/Users/artin/.config/haskmacs/config.org") (14496 #7#) (15798 #7#) (14496 #7#) (14385 #7#) (15896 #7#) (14496 #7#) (3927 #7#) (200 #7#) (234 #7#) (988 #8="/Users/artin/.config/haskmacs/config.org") (681 #8#) (26 #8#) (18232 #9="/Users/artin/.config/haskmacs/config.org") (1 #9#) (8067 #10="/Users/artin/.config/haskmacs/config.org") (1 #10#) (1 "/Users/artin/.config/haskmacs/early-init.el") (304 #11="/Users/artin/.config/haskmacs/config.org") (213 "/Users/artin/.config/haskmacs/early-init.el") (304 #11#) (17791 #11#) (397 #11#) (52 "/Users/artin/.config/haskmacs/config.org") (26 "/Users/artin/.config/haskmacs/config.org") (1 "/Users/artin/.config/haskmacs/config.org") (18687 #12="/Users/artin/.config/haskmacs/config.org") (1 #12#) (3201 "/Users/artin/Programming/projects/ghc/compiler/GHC/Tc/Utils/Env.hs") (1 #15="/Users/artin/Downloads/ott manual.pdf") (24646 #14="/Users/artin/.config/haskmacs/config.org") (260 #13="/Users/artin/Programming/practicing/Make/Makefile") (81 #13#) (1 #13#) (8 #13#) (26 #13#) (24448 #14#) (24402 #14#) (19642 #14#) (19115 #14#) (1 #15#) (19233 #14#) (18898 #14#) (18725 #14#) (9203 #14#) (7214 #14#) (5259 #14#) (4239 #14#) (2486 #14#) (3877 #16="/Users/artin/Agenda/todo.org") (2727 #16#) (1 #16#) (5927 #17="/Users/artin/Research/GHC/haskell-specification/grammar.ott") (1 #17#) (10 #18="/Users/artin/Research/GHC/haskell-specification/rules.ott") (1 #18#) (6054 #18#) (168 #18#) (1 #17#) (14447 #19="/Users/artin/Research/GHC/haskell-specification/grammar.ott") (1 #19#) (14879 #19#) (4567 #19#) (10020 #19#) (6537 #19#) (261 #19#) (27 #19#) (6172 #19#) (6412 #19#) (6499 #19#) (6553 #19#)))
